typedef struct {
	float3 origin;
	float3 direction;
	float t;
	float4 color;
	float3 normal;
} Ray;

typedef struct { float f[3]; } float_3;

inline void Intersect(Ray* ray, float4 sphere) {
	float3 c = sphere.xyz - ray->origin;
	float t = dot(c, ray->direction);
	float3 q = c - ray->direction * t;
	float p2 = dot(q, q);
	if (p2 < sphere.w * sphere.w) {
		t -= sqrt(sphere.w * sphere.w - p2);
		if (t < ray->t && t > 0) {
			ray->t = t;
			float3 endpos = ray->origin + ray->direction * t;
			ray->normal = normalize(endpos - sphere.xyz);
		}
	}
}

kernel void raytracer(image2d_t write_only A, 
					  float2 screen_size, 
					  global float4* spheres, 
					  int sphere_count,
					  global float3* lights,
					  int light_count,
					  float time,
					  global float* screen_data) 
{
	int x = get_global_id(0);
	int y = get_global_id(1);


	float3 cam_pos = (float3)(screen_data[0], screen_data[1], screen_data[2]);
	float3 cam_dir = (float3)(screen_data[3], screen_data[4], screen_data[5]);
	float3 screen_origin = (float3)(screen_data[6], screen_data[7], screen_data[8]);
	float3 screen_horz = (float3)(screen_data[9], screen_data[10], screen_data[11]);
	float3 screen_vert = (float3)(screen_data[12], screen_data[13], screen_data[14]);

	Ray ray;

	//Starting rays from camera
	ray.origin =  (float3)(0);
	ray.t = FLT_MAX;
	ray.color = (float4)(0);

	//calculate screen pixel
	float u =  (x / screen_size.x);
	float v =  (y / screen_size.y);
	
	float3 screen_pos = screen_origin + screen_horz * u + screen_vert * v;
	ray.direction = normalize(screen_pos - ray.origin);

	//printf("%f, %f, %f\n", screen_origin.x, screen_origin.y, screen_origin.z);
	//printf("%f, %f, %f \n", screen_pos.x, screen_pos.y, screen_pos.z);
	

	for(int i=0; i<sphere_count; i++) {
		Intersect(&ray, spheres[i]);
	}

	if (ray.t < FLT_MAX) {
		for(int i=0; i<light_count; i++) {
			Ray shadowRay;
			shadowRay.t = FLT_MAX;
			shadowRay.origin = ray.origin + ray.direction * (ray.t-0.0001f);
			shadowRay.direction = normalize((lights[i] + (float3)(0,sin(time),0))- shadowRay.origin);

			for(int j=0; j<sphere_count; j++)
				Intersect(&shadowRay, spheres[j]);

			if (shadowRay.t == FLT_MAX)
				ray.color += (float4)(0.5f) * dot(shadowRay.direction, ray.normal);
		}
	}

	write_imagef(A, (int2)(x,y), ray.color);

	
	/*
	  def Intersect(self, ray):
    c = self.pos - ray.O
    t = c.Dot(ray.D)
    q = c - ray.D * t
    p2 = q.Dot(q)
    if p2 > self.rad * self.rad:
      return
    t -= math.sqrt(self.rad * self.rad - p2)
    if ((t < ray.T) and t > 0):
      ray.T = t
      ray.I = self
      start = ray.O + ray.D * ray.T
      ray.Normal = (start - self.pos).Normalize() */
}